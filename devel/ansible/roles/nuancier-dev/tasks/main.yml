---
- name: Install basic packages & nuancier system dependencies
  dnf:
    name:
    - freeipa-client
    - git
    - python-sphinx
    - vim-enhanced
    - gcc
    - libffi-devel
    - openssl-devel
    - python3-devel
    - redhat-rpm-config
    - python3-rpm
    state: present

# Add various helpful configuration files
- name: Install a custom bashrc
  become_user: "{{ ansible_env.SUDO_USER }}"
  copy: src=bashrc dest=/home/{{ ansible_env.SUDO_USER }}/.bashrc

- name: Install the message of the day
  copy: src=motd dest=/etc/motd

- name: Install nuancier.cfg
  become_user: "{{ ansible_env.SUDO_USER }}"
  copy: src=nuancier.cfg dest=/home/{{ ansible_env.SUDO_USER }}/nuancier.cfg

- name: Install alembic.ini
  become_user: "{{ ansible_env.SUDO_USER }}"
  copy: src=alembic.ini.devel dest=/home/{{ ansible_env.SUDO_USER }}/alembic.ini


- name: Install nuancier requirements
  pip:
    requirements: "requirements.txt"
  args:
    chdir: /vagrant/

- name: Install nuancier test requirements
  pip:
    requirements: "test-requirements.txt"
  args:
    chdir: /vagrant/

- name: Install nuancier
  pip:
    name: "file:///vagrant/"
    extra_args: "-e"

# setup OIDC to tinystage
- name: Enroll system as IPA client
  shell: ipa-client-install --hostname nuancier.tinystage.test --domain tinystage.test --realm TINYSTAGE.TEST --server ipa.tinystage.test -p admin -w password -U -N --force-join

- name: Generate and get SSL cert
  shell: ipa-getcert request -f /etc/pki/tls/certs/server.pem -k /etc/pki/tls/private/server.key -K HTTP/nuancier.tinystage.test

- name: Check the cert is there
  wait_for:
    path: /etc/pki/tls/certs/server.pem
    state: present

- name: Check the key is there
  wait_for:
    path: /etc/pki/tls/private/server.key
    state: present

- name: install oidc_register with pip
  pip:
    name: oidc-register

- name: Determine Python version
  command:
    argv:
      - python3
      - -c
      - "from sys import version_info as vi; print(f'{vi[0]}.{vi[1]}')"
  register: _python3_version_result
  changed_when: False

- name: Set Python version fact
  set_fact:
    py3ver: "{{ _python3_version_result.stdout | trim }}"

# not sure of how to do this another way, but without this, oidc_register fails
- name: Put tinystage root CA in the list of CA's for httplib2
  shell: cat /etc/ipa/ca.crt >> /usr/local/lib/python{{ py3ver }}/site-packages/httplib2/cacerts.txt

- name: register the application with oidc-register
  shell: oidc-register --debug https://ipsilon.tinystage.test/idp/openidc/ https://nuancier.tinystage.test/oidc_callback
  become: yes
  become_user: vagrant
  args:
    chdir: /home/vagrant/



# Create and configure the database
- name: Create the nuancier SQLite database
  become_user: "{{ ansible_env.SUDO_USER }}"
  command: python /vagrant/createdb.py
  args:
    creates: /var/tmp/nuancier_lite.sqlite
    chdir: "/home/{{ ansible_env.SUDO_USER }}/"

- name: Stamp the database with its current migration
  become_user: "{{ ansible_env.SUDO_USER }}"
  shell: >
      alembic stamp
      $(alembic heads | awk '{ print $1 }')
  args:
    chdir: "/home/{{ ansible_env.SUDO_USER }}/"


# Set up the service unit
- name: Install the systemd unit file for nuancier service
  copy:
    src: nuancier.service
    dest: /etc/systemd/system/nuancier.service
    mode: 0644

- name: Start nuancier service using systemd
  systemd:
    state: started
    name: nuancier
    daemon_reload: yes
    enabled: yes
